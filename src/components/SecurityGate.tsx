// components/SecurityGate.tsx
import React, { useState, useEffect } from 'react';
import { useSecurity } from '../store/security';
import { useSettings } from '../store/settings';
import { Lock, Shield, Eye, EyeOff, Loader } from 'lucide-react';

interface SecurityGateProps {
  onAuthenticated: () => void;
}

const SecurityGate: React.FC<SecurityGateProps> = ({ onAuthenticated }) => {
  const { login, isAuthenticated } = useSecurity();
  const { getCurrentTheme } = useSettings();
  const [isLoading, setIsLoading] = useState(false);
  const [rememberSession, setRememberSession] = useState(true);
  const [showPassword, setShowPassword] = useState(false);
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    if (isAuthenticated) {
      onAuthenticated();
    }
  }, [isAuthenticated, onAuthenticated]);

  const handleLogin = async () => {
    setIsLoading(true);
    setError('');

    try {
      // –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã API –≤—ã–∑–æ–≤)
      if (password && password.length >= 1) {
        const success = await login(rememberSession);
        if (success) {
          onAuthenticated();
        } else {
          setError('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É');
        }
      } else {
        setError('–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
      }
    } catch (err) {
      setError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
      console.error('Login error:', err);
    } finally {
      setIsLoading(false);
    }
  };

  const handleQuickLogin = async () => {
    setIsLoading(true);
    setError('');

    try {
      const success = await login(rememberSession);
      if (success) {
        onAuthenticated();
      }
    } catch (err) {
      setError('–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏');
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !isLoading) {
      if (password) {
        handleLogin();
      } else {
        handleQuickLogin();
      }
    }
  };

  const theme = getCurrentTheme();
  const isDark = theme === 'dark';

  return (
    <div className={`min-h-screen flex items-center justify-center p-4 ${
      isDark ? 'bg-slate-900' : 'bg-gray-50'
    }`}>
      {/* –§–æ–Ω–æ–≤—ã–π —É–∑–æ—Ä */}
      <div className="absolute inset-0 overflow-hidden">
        <div className={`absolute -top-1/2 -left-1/2 w-full h-full opacity-5 ${
          isDark ? 'text-white' : 'text-gray-900'
        }`}>
          <Shield className="w-96 h-96" />
        </div>
        <div className={`absolute -bottom-1/2 -right-1/2 w-full h-full opacity-5 ${
          isDark ? 'text-white' : 'text-gray-900'
        }`}>
          <Lock className="w-96 h-96" />
        </div>
      </div>

      <div className="relative w-full max-w-md">
        <div className={`rounded-2xl shadow-2xl p-8 ${
          isDark 
            ? 'bg-slate-800 border border-slate-700' 
            : 'bg-white border border-gray-200'
        }`}>
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <div className="text-center mb-8">
            <div className={`mx-auto w-16 h-16 rounded-full flex items-center justify-center mb-4 ${
              isDark ? 'bg-blue-900/30' : 'bg-blue-100'
            }`}>
              <Shield className={`w-8 h-8 ${
                isDark ? 'text-blue-400' : 'text-blue-600'
              }`} />
            </div>
            
            <h1 className={`text-2xl font-bold mb-2 ${
              isDark ? 'text-white' : 'text-gray-900'
            }`}>
              Organizer Zero
            </h1>
            
            <p className={`text-sm ${
              isDark ? 'text-slate-400' : 'text-gray-600'
            }`}>
              –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫—É
            </p>
          </div>

          {/* –û—à–∏–±–∫–∞ */}
          {error && (
            <div className={`mb-4 p-3 rounded-lg text-sm ${
              isDark 
                ? 'bg-red-900/30 text-red-400 border border-red-800' 
                : 'bg-red-50 text-red-700 border border-red-200'
            }`}>
              {error}
            </div>
          )}

          {/* –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ */}
          <div className="space-y-4">
            {/* –ü–æ–ª–µ –ø–∞—Ä–æ–ª—è */}
            <div>
              <label className={`block text-sm font-medium mb-2 ${
                isDark ? 'text-slate-300' : 'text-gray-700'
              }`}>
                –ü–∞—Ä–æ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
              </label>
              
              <div className="relative">
                <input
                  type={showPassword ? 'text' : 'password'}
                  value={password}
                  onChange={(e) => setPassword(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º"
                  className={`w-full px-4 py-3 pr-12 rounded-lg border transition-colors ${
                    isDark 
                      ? 'bg-slate-700 border-slate-600 text-white placeholder-slate-400 focus:border-blue-500 focus:ring-blue-500/20' 
                      : 'bg-white border-gray-300 text-gray-900 placeholder-gray-500 focus:border-blue-500 focus:ring-blue-500/20'
                  } focus:outline-none focus:ring-2`}
                  disabled={isLoading}
                />
                
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className={`absolute right-3 top-1/2 -translate-y-1/2 p-1 rounded ${
                    isDark 
                      ? 'text-slate-400 hover:text-slate-300' 
                      : 'text-gray-500 hover:text-gray-700'
                  } transition-colors`}
                  disabled={isLoading}
                >
                  {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                </button>
              </div>
            </div>

            {/* –ß–µ–∫–±–æ–∫—Å "–ó–∞–ø–æ–º–Ω–∏—Ç—å —Å–µ—Å—Å–∏—é" */}
            <div className="flex items-center">
              <input
                type="checkbox"
                id="remember"
                checked={rememberSession}
                onChange={(e) => setRememberSession(e.target.checked)}
                className={`w-4 h-4 rounded border ${
                  isDark 
                    ? 'bg-slate-700 border-slate-600 text-blue-500 focus:ring-blue-500/20' 
                    : 'bg-white border-gray-300 text-blue-600 focus:ring-blue-500/20'
                } focus:ring-2 focus:outline-none`}
                disabled={isLoading}
              />
              <label 
                htmlFor="remember" 
                className={`ml-3 text-sm cursor-pointer ${
                  isDark ? 'text-slate-300' : 'text-gray-700'
                }`}
              >
                –ó–∞–ø–æ–º–Ω–∏—Ç—å –Ω–∞ {rememberSession ? '24 —á–∞—Å–∞' : '4 —á–∞—Å–∞'}
              </label>
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ */}
            <div className="space-y-3 pt-2">
              {/* –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ —Å –ø–∞—Ä–æ–ª–µ–º */}
              {password && (
                <button
                  onClick={handleLogin}
                  disabled={isLoading}
                  className={`w-full py-3 px-4 rounded-lg font-medium transition-all ${
                    isDark
                      ? 'bg-blue-600 hover:bg-blue-700 disabled:bg-blue-800 text-white'
                      : 'bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white'
                  } disabled:cursor-not-allowed transform hover:scale-[1.02] active:scale-[0.98]`}
                >
                  {isLoading ? (
                    <span className="flex items-center justify-center">
                      <Loader className="w-5 h-5 animate-spin mr-2" />
                      –í—Ö–æ–¥...
                    </span>
                  ) : (
                    '–í–æ–π—Ç–∏ —Å –ø–∞—Ä–æ–ª–µ–º'
                  )}
                </button>
              )}

              {/* –ö–Ω–æ–ø–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—Ö–æ–¥–∞ */}
              <button
                onClick={handleQuickLogin}
                disabled={isLoading}
                className={`w-full py-3 px-4 rounded-lg font-medium transition-all ${
                  password 
                    ? isDark 
                      ? 'bg-slate-700 hover:bg-slate-600 text-slate-300 border border-slate-600'
                      : 'bg-gray-100 hover:bg-gray-200 text-gray-700 border border-gray-300'
                    : isDark
                      ? 'bg-blue-600 hover:bg-blue-700 disabled:bg-blue-800 text-white'
                      : 'bg-blue-600 hover:bg-blue-700 disabled:bg-blue-400 text-white'
                } disabled:cursor-not-allowed transform hover:scale-[1.02] active:scale-[0.98]`}
              >
                {isLoading ? (
                  <span className="flex items-center justify-center">
                    <Loader className="w-5 h-5 animate-spin mr-2" />
                    –í—Ö–æ–¥...
                  </span>
                ) : (
                  password ? '–í–æ–π—Ç–∏ –±–µ–∑ –ø–∞—Ä–æ–ª—è' : '–í–æ–π—Ç–∏'
                )}
              </button>
            </div>
          </div>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ */}
          <div className={`mt-6 p-4 rounded-lg ${
            isDark ? 'bg-slate-700/50' : 'bg-gray-50'
          }`}>
            <h3 className={`text-sm font-medium mb-2 ${
              isDark ? 'text-slate-300' : 'text-gray-700'
            }`}>
              üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
            </h3>
            <ul className={`text-xs space-y-1 ${
              isDark ? 'text-slate-400' : 'text-gray-600'
            }`}>
              <li>‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ</li>
              <li>‚Ä¢ –°–µ—Å—Å–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {rememberSession ? '24 —á–∞—Å–∞' : '4 —á–∞—Å–∞'}</li>
              <li>‚Ä¢ –ü–∞—Ä–æ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏</li>
            </ul>
          </div>

          {/* –í–µ—Ä—Å–∏—è */}
          <div className="text-center mt-6">
            <p className={`text-xs ${
              isDark ? 'text-slate-500' : 'text-gray-400'
            }`}>
              Organizer Zero v3.4 ‚Ä¢ –ú–æ–¥—É–ª—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞–∫—Ç–∏–≤–µ–Ω
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SecurityGate;