// components/forms/QuickAdd.tsx
import React, { useState, useRef, useEffect } from 'react';
import {
  Plus,
  Send,
  Sparkles,
  Clock,
  Calendar,
  MapPin,
  Tag,
  AlertCircle,
  HelpCircle,
  Zap
} from 'lucide-react';
import { Button } from '../ui';
import { useTimeBlocks, useNotifications, useCalendar } from '../../store/hooks';
import { parseEventInput } from '../../utils';
import type { QuickAddProps } from '../../types';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π —Å —É–º–Ω—ã–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º
 */
export const QuickAdd: React.FC<QuickAddProps> = ({
  onAdd,
  placeholder = "–ù–∞–ø—Ä–∏–º–µ—Ä: –ü—Ä–∞–∫—Ç–∏–∫–∞ —Ñ–æ—Ä—Ç–µ–ø–∏–∞–Ω–æ 9:00-10:30 @–º—É–∑—ã–∫–∞–ª—å–Ω–∞—è –∫–æ–º–Ω–∞—Ç–∞ #—Ç–µ—Ö–Ω–∏–∫–∞",
  currentDate
}) => {
  const { addTimeBlock, loading } = useTimeBlocks();
  const { addNotification } = useNotifications();
  const { setCurrentDate } = useCalendar();
  
  const [input, setInput] = useState('');
  const [showPreview, setShowPreview] = useState(false);
  const [showHelp, setShowHelp] = useState(false);
  const inputRef = useRef<HTMLInputElement>(null);

  // –ü–∞—Ä—Å–∏–Ω–≥ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
  const parsedEvent = parseEventInput(input);
  const validation = { isValid: !!parsedEvent, errors: parsedEvent ? [] as string[] : ['–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ'] };

  // –§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—Ä–∏ –º–∞—É–Ω—Ç–µ
  useEffect(() => {
    if (inputRef.current) {
      inputRef.current.focus();
    }
  }, []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!input.trim()) {
      addNotification({
        type: 'warning',
        title: '–ü—É—Å—Ç–æ–µ –ø–æ–ª–µ',
        message: '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è',
        autoRemove: true
      });
      return;
    }

    if (!validation.isValid || !parsedEvent) {
      addNotification({
        type: 'error',
        title: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
        message: validation.errors[0],
        autoRemove: true
      });
      return;
    }

    try {
      await addTimeBlock(parsedEvent as any);
      
      // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–∞—Ç–µ —Å–æ–±—ã—Ç–∏—è –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç —Ç–µ–∫—É—â–µ–π
      if ((parsedEvent as any).date && (parsedEvent as any).date !== currentDate) {
        setCurrentDate((parsedEvent as any).date);
      }
      
      onAdd(input);
      setInput('');
      setShowPreview(false);
      
      addNotification({
        type: 'success',
        title: '–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ',
        message: `"${(parsedEvent as any).title}" –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å`,
        autoRemove: true
      });
    } catch (error) {
      addNotification({
        type: 'error',
        title: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
        message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ',
        autoRemove: true
      });
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–≤–æ–¥–∞
  const handleInputChange = (value: string) => {
    setInput(value);
    setShowPreview(value.trim().length > 0);
  };

  // –ë—ã—Å—Ç—Ä—ã–µ —à–∞–±–ª–æ–Ω—ã
  const quickTemplates = [
    {
      text: "–ü—Ä–∞–∫—Ç–∏–∫–∞ —Ñ–æ—Ä—Ç–µ–ø–∏–∞–Ω–æ 9:00-10:30 #—Ç–µ—Ö–Ω–∏–∫–∞",
      icon: "üéπ",
      description: "–ú—É–∑—ã–∫–∞–ª—å–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞"
    },
    {
      text: "–£—Ä–æ–∫ –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏ 14:00-15:30 @—à–∫–æ–ª–∞",
      icon: "üìö", 
      description: "–£—á–µ–±–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ"
    },
    {
      text: "–û–±–µ–¥ 12:00-13:00 @–∫–∞—Ñ–µ",
      icon: "üçΩÔ∏è",
      description: "–ü–µ—Ä–µ—Ä—ã–≤ –Ω–∞ –æ–±–µ–¥"
    }
  ];

  return (
    <form onSubmit={handleSubmit} className="space-y-2">
      <div className="flex items-center space-x-2">
        <input
          ref={inputRef}
          type="text"
          value={input}
          onChange={(e) => handleInputChange(e.target.value)}
          placeholder={placeholder}
          className="flex-1 px-3 py-2 rounded bg-gray-800 text-gray-100 border border-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
        />
        <Button type="submit" loading={loading.isLoading} icon={Send} aria-label="–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ">
          –°–æ–∑–¥–∞—Ç—å
        </Button>
      </div>

      {showPreview && parsedEvent && (
        <div className="bg-gray-800 border border-gray-700 rounded p-3 text-sm">
          <div className="flex items-center space-x-2 text-gray-300">
            <Sparkles className="w-4 h-4" />
            <span>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—ã—Ç–∏—è</span>
          </div>

          <div className="mt-2 grid grid-cols-1 md:grid-cols-2 gap-3">
            <div className="space-y-2">
              <div className="flex items-center space-x-2">
                <span className="text-lg">‚ú®</span>
                <span className="text-white font-medium">{(parsedEvent as any).title}</span>
              </div>
              {(parsedEvent as any).date && (
                <div className="flex items-center space-x-2 text-gray-300">
                  <Calendar className="w-4 h-4" />
                  <span>{(parsedEvent as any).date}</span>
                </div>
              )}
              {(parsedEvent as any).start && (parsedEvent as any).end && (
                <div className="flex items-center space-x-2 text-gray-300">
                  <Clock className="w-4 h-4" />
                  <span>{(parsedEvent as any).start} - {(parsedEvent as any).end}</span>
                </div>
              )}
            </div>

            <div className="space-y-2">
              {(parsedEvent as any).location && (
                <div className="flex items-center space-x-2 text-gray-300">
                  <MapPin className="w-4 h-4" />
                  <span>{(parsedEvent as any).location}</span>
                </div>
              )}
              {(parsedEvent as any).tags && Array.isArray((parsedEvent as any).tags) && (
                <div className="flex items-center space-x-2 text-gray-300">
                  <Tag className="w-4 h-4" />
                  <div className="flex flex-wrap gap-1">
                    {((parsedEvent as any).tags as string[]).map((tag: string, index: number) => (
                      <span key={`${tag}-${index}`} className="px-2 py-0.5 rounded bg-gray-700 text-gray-200 text-xs">#{tag}</span>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      {/* –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É */}
      <div className="text-xs text-gray-500 flex items-center space-x-2">
        <HelpCircle className="w-4 h-4" />
        <span>–ü—Ä–∏–º–µ—Ä—ã: "–ü—Ä–∞–∫—Ç–∏–∫–∞ 9:00 1—á", "–í—Å—Ç—Ä–µ—á–∞ –∑–∞–≤—Ç—Ä–∞ 14:00", "–û–±–µ–¥ 12:00-13:00"</span>
      </div>
    </form>
  );
};