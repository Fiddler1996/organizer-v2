// components/views/AnalyticsView.tsx
import React, { useState, useMemo } from 'react';
import {
  BarChart3,
  PieChart,
  TrendingUp,
  TrendingDown,
  Calendar,
  Clock,
  Target,
  Award,
  Activity,
  Zap,
  CheckCircle,
  AlertCircle,
  Filter,
  Download,
  RefreshCw
} from 'lucide-react';
import { useAnalytics, useTimeBlocks, useCalendar } from '../../store/hooks';
import { Button, LoadingSpinner } from '../ui';
import {
  formatNumber,
  formatPercent,
  formatDuration,
  formatDate
} from '../../utils';
import { EVENT_TYPE_CONFIGS } from '../../utils/constants';
import type { TimeBlockType } from '../../types';

const getTypeColor = (type: TimeBlockType) => {
  const cfg = EVENT_TYPE_CONFIGS[type];
  const [bgClass] = cfg.color.split(' ');
  return { bg: bgClass };
};

const getTypeIcon = (type: TimeBlockType) => EVENT_TYPE_CONFIGS[type].icon;

/**
 * –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –≤–∏–¥ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
 */
export const AnalyticsView: React.FC = () => {
  const analytics = useAnalytics();
  const { timeBlocks, loading } = useTimeBlocks();
  const { getEventsForRange } = useCalendar();
  
  const [timePeriod, setTimePeriod] = useState<'week' | 'month' | 'year'>('week');
  const [showDetailedStats, setShowDetailedStats] = useState(false);

  // –í—ã—á–∏—Å–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∑–∞ –ø–µ—Ä–∏–æ–¥
  const periodAnalytics = useMemo(() => {
    const now = new Date();
    let startDate: Date;
    
    switch (timePeriod) {
      case 'week':
        startDate = new Date(now);
        startDate.setDate(now.getDate() - 7);
        break;
      case 'month':
        startDate = new Date(now);
        startDate.setMonth(now.getMonth() - 1);
        break;
      case 'year':
        startDate = new Date(now);
        startDate.setFullYear(now.getFullYear() - 1);
        break;
    }
    
    const events = getEventsForRange(startDate, now);
    const completedEvents = events.filter(e => e.completed);
    const totalDuration = events.reduce((sum, e) => sum + e.duration, 0);
    const completedDuration = completedEvents.reduce((sum, e) => sum + e.duration, 0);
    
    return {
      totalEvents: events.length,
      completedEvents: completedEvents.length,
      completionRate: events.length > 0 ? Math.round((completedEvents.length / events.length) * 100) : 0,
      totalDuration,
      completedDuration,
      avgEventDuration: events.length > 0 ? Math.round(totalDuration / events.length) : 0,
      practiceTime: events.filter(e => e.type === 'practice').reduce((sum, e) => sum + e.duration, 0)
    };
  }, [timePeriod, getEventsForRange]);

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å–æ–±—ã—Ç–∏–π
  const typeStats = useMemo(() => {
    const stats = Object.entries(analytics.eventsByType).map(([type, count]) => ({
      type: type as TimeBlockType,
      count,
      percentage: Math.round((count / analytics.totalEvents) * 100),
      duration: timeBlocks
        .filter(tb => tb.type === type)
        .reduce((sum, tb) => {
          const [startHours, startMinutes] = tb.start.split(':').map(Number);
          const [endHours, endMinutes] = tb.end.split(':').map(Number);
          const startTotal = startHours * 60 + startMinutes;
          const endTotal = endHours * 60 + endMinutes;
          return sum + Math.max(0, endTotal - startTotal);
        }, 0)
    })).sort((a, b) => b.count - a.count);
    
    return stats;
  }, [analytics.eventsByType, analytics.totalEvents, timeBlocks]);

  // –¢—Ä–µ–Ω–¥—ã –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
  const weekdayStats = useMemo(() => {
    const weekdays = ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'];
    const stats = weekdays.map((day, index) => {
      const dayEvents = timeBlocks.filter(tb => new Date(tb.date).getDay() === index);
      return {
        day,
        count: dayEvents.length,
        completed: dayEvents.filter(e => e.completed).length,
        duration: dayEvents.reduce((sum, e) => {
          const [startHours, startMinutes] = e.start.split(':').map(Number);
          const [endHours, endMinutes] = e.end.split(':').map(Number);
          return sum + Math.max(0, (endHours * 60 + endMinutes) - (startHours * 60 + startMinutes));
        }, 0)
      };
    });
    
    return stats;
  }, [timeBlocks]);

  const exportData = () => {
    const data = {
      exportDate: new Date().toISOString(),
      period: timePeriod,
      analytics: periodAnalytics,
      typeStats,
      weekdayStats,
      totalEvents: analytics.totalEvents
    };
    
    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `organizer-analytics-${timePeriod}-${new Date().toISOString().split('T')[0]}.json`;
    a.click();
    URL.revokeObjectURL(url);
  };

  return (
    <div className="space-y-6">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex flex-col lg:flex-row justify-between items-start lg:items-center space-y-4 lg:space-y-0">
        <div>
          <h1 className="text-3xl font-bold text-white mb-2">
            üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
          </h1>
          <p className="text-gray-400">
            –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
          </p>
        </div>

        {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
        <div className="flex items-center space-x-4">
          {/* –í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ */}
          <div className="flex bg-gray-700 rounded-lg p-1">
            {(['week', 'month', 'year'] as const).map((period) => (
              <Button
                key={period}
                variant={timePeriod === period ? 'primary' : 'secondary'}
                size="sm"
                onClick={() => setTimePeriod(period)}
                className="px-4"
              >
                {period === 'week' ? '–ù–µ–¥–µ–ª—è' : 
                 period === 'month' ? '–ú–µ—Å—è—Ü' : '–ì–æ–¥'}
              </Button>
            ))}
          </div>

          <Button
            variant="secondary"
            size="sm"
            onClick={exportData}
            icon={Download}
            aria-label="–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"
          >
            –≠–∫—Å–ø–æ—Ä—Ç
          </Button>
        </div>
      </div>

      {/* –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <div className="bg-gray-800 rounded-lg border border-gray-700 p-6">
          <div className="flex items-center justify-between mb-4">
            <div className="p-2 bg-blue-500 rounded-lg">
              <Calendar className="w-6 h-6 text-white" />
            </div>
            <TrendingUp className="w-5 h-5 text-green-400" />
          </div>
          <div className="text-3xl font-bold text-white mb-1">
            {formatNumber(periodAnalytics.totalEvents)}
          </div>
          <div className="text-sm text-gray-400">
            –°–æ–±—ã—Ç–∏–π –∑–∞ {timePeriod === 'week' ? '–Ω–µ–¥–µ–ª—é' : timePeriod === 'month' ? '–º–µ—Å—è—Ü' : '–≥–æ–¥'}
          </div>
        </div>

        <div className="bg-gray-800 rounded-lg border border-gray-700 p-6">
          <div className="flex items-center justify-between mb-4">
            <div className="p-2 bg-green-500 rounded-lg">
              <CheckCircle className="w-6 h-6 text-white" />
            </div>
            <div className="text-2xl font-bold text-green-400">
              {periodAnalytics.completionRate}%
            </div>
          </div>
          <div className="text-3xl font-bold text-white mb-1">
            {formatNumber(periodAnalytics.completedEvents)}
          </div>
          <div className="text-sm text-gray-400">–í—ã–ø–æ–ª–Ω–µ–Ω–æ</div>
        </div>

        <div className="bg-gray-800 rounded-lg border border-gray-700 p-6">
          <div className="flex items-center justify-between mb-4">
            <div className="p-2 bg-purple-500 rounded-lg">
              <Clock className="w-6 h-6 text-white" />
            </div>
            <Activity className="w-5 h-5 text-purple-400" />
          </div>
          <div className="text-3xl font-bold text-white mb-1">
            {Math.round(periodAnalytics.totalDuration / 60)}—á
          </div>
          <div className="text-sm text-gray-400">–û–±—â–µ–µ –≤—Ä–µ–º—è</div>
        </div>

        <div className="bg-gray-800 rounded-lg border border-gray-700 p-6">
          <div className="flex items-center justify-between mb-4">
            <div className="p-2 bg-yellow-500 rounded-lg">
              <Target className="w-6 h-6 text-white" />
            </div>
            <Zap className="w-5 h-5 text-yellow-400" />
          </div>
          <div className="text-3xl font-bold text-white mb-1">
            {periodAnalytics.avgEventDuration}
          </div>
          <div className="text-sm text-gray-400">–ú–∏–Ω/—Å–æ–±—ã—Ç–∏–µ</div>
        </div>
      </div>

      {/* –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å–æ–±—ã—Ç–∏–π */}
        <div className="bg-gray-800 rounded-lg border border-gray-700 p-6">
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-xl font-semibold text-white flex items-center space-x-2">
              <PieChart className="w-6 h-6" />
              <span>–°–æ–±—ã—Ç–∏—è –ø–æ —Ç–∏–ø–∞–º</span>
            </h3>
            <Button
              variant="secondary"
              size="sm"
              onClick={() => setShowDetailedStats(!showDetailedStats)}
              icon={showDetailedStats ? Filter : BarChart3}
            >
              {showDetailedStats ? '–°–∫—Ä—ã—Ç—å' : '–î–µ—Ç–∞–ª–∏'}
            </Button>
          </div>

          <div className="space-y-4">
            {typeStats.map((stat) => {
              const typeColor = getTypeColor(stat.type);
              const typeIcon = getTypeIcon(stat.type);
              
              return (
                <div key={stat.type} className="space-y-2">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <span className="text-lg">{typeIcon}</span>
                      <span className="text-white font-medium">
                        {stat.type === 'practice' ? '–ü—Ä–∞–∫—Ç–∏–∫–∞' :
                         stat.type === 'concert' ? '–ö–æ–Ω—Ü–µ—Ä—Ç' :
                         stat.type === 'lesson' ? '–£—Ä–æ–∫' :
                         stat.type === 'travel' ? '–ü–æ–µ–∑–¥–∫–∞' :
                         stat.type === 'meal' ? '–ï–¥–∞' :
                         stat.type === 'break' ? '–ü–µ—Ä–µ—Ä—ã–≤' :
                         stat.type === 'personal' ? '–õ–∏—á–Ω–æ–µ' : '–°–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è'}
                      </span>
                    </div>
                    <div className="text-right">
                      <div className="text-white font-semibold">{stat.count}</div>
                      <div className="text-xs text-gray-400">{stat.percentage}%</div>
                    </div>
                  </div>
                  
                  {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä */}
                  <div className="w-full bg-gray-700 rounded-full h-2">
                    <div
                      className={`h-2 rounded-full ${typeColor.bg}`}
                      style={{ width: `${stat.percentage}%` }}
                    ></div>
                  </div>
                  
                  {showDetailedStats && (
                    <div className="text-sm text-gray-400 ml-8">
                      –û–±—â–µ–µ –≤—Ä–µ–º—è: {Math.round(stat.duration / 60)}—á {stat.duration % 60}–º–∏–Ω
                    </div>
                  )}
                </div>
              );
            })}
          </div>
        </div>

        {/* –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ */}
        <div className="bg-gray-800 rounded-lg border border-gray-700 p-6">
          <h3 className="text-xl font-semibold text-white mb-6 flex items-center space-x-2">
            <BarChart3 className="w-6 h-6" />
            <span>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º</span>
          </h3>

          <div className="space-y-4">
            {weekdayStats.map((stat, index) => {
              const maxCount = Math.max(...weekdayStats.map(s => s.count));
              const percentage = maxCount > 0 ? (stat.count / maxCount) * 100 : 0;
              const isWeekend = index === 0 || index === 6;
              
              return (
                <div key={stat.day} className="space-y-2">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center space-x-3">
                      <span className={`text-sm font-medium w-8 ${
                        isWeekend ? 'text-yellow-400' : 'text-gray-300'
                      }`}>
                        {stat.day}
                      </span>
                      <span className="text-white">{stat.count} —Å–æ–±—ã—Ç–∏–π</span>
                    </div>
                    <div className="text-right text-sm">
                      <div className="text-green-400">{stat.completed} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ</div>
                      <div className="text-gray-400">{Math.round(stat.duration / 60)}—á</div>
                    </div>
                  </div>
                  
                  <div className="w-full bg-gray-700 rounded-full h-3">
                    <div
                      className={`h-3 rounded-full ${
                        isWeekend ? 'bg-yellow-500' : 'bg-blue-500'
                      }`}
                      style={{ width: `${percentage}%` }}
                    ></div>
                  </div>
                </div>
              );
            })}
          </div>
        </div>
      </div>

      {/* –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —Ü–µ–ª–∏ */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        {/* –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è */}
        <div className="bg-gray-800 rounded-lg border border-gray-700 p-6">
          <h3 className="text-xl font-semibold text-white mb-6 flex items-center space-x-2">
            <Award className="w-6 h-6" />
            <span>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</span>
          </h3>

          <div className="space-y-4">
            {/* –ü–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ */}
            <div className="flex items-center space-x-4 p-4 bg-gray-750 rounded-lg">
              <div className="p-2 bg-blue-500 rounded-lg">
                <Target className="w-5 h-5 text-white" />
              </div>
              <div className="flex-1">
                <div className="text-white font-medium">–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏</div>
                <div className="text-sm text-gray-400">–°–æ–∑–¥–∞–Ω–æ –ø–µ—Ä–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ</div>
              </div>
              <div className="text-2xl"></div>
            </div>

            {/* –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å */}
            {analytics.completionRate >= 80 && (
              <div className="flex items-center space-x-4 p-4 bg-gray-750 rounded-lg">
                <div className="p-2 bg-green-500 rounded-lg">
                  <CheckCircle className="w-5 h-5 text-white" />
                </div>
                <div className="flex-1">
                  <div className="text-white font-medium">–í—ã—Å–æ–∫–∞—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</div>
                  <div className="text-sm text-gray-400">–í—ã–ø–æ–ª–Ω–µ–Ω–æ 80%+ —Å–æ–±—ã—Ç–∏–π</div>
                </div>
                <div className="text-2xl">‚ö°</div>
              </div>
            )}

            {/* –ü—Ä–∞–∫—Ç–∏–∫–∞ */}
            {analytics.practiceEvents >= 10 && (
              <div className="flex items-center space-x-4 p-4 bg-gray-750 rounded-lg">
                <div className="p-2 bg-purple-500 rounded-lg">
                  <Activity className="w-5 h-5 text-white" />
                </div>
                <div className="flex-1">
                  <div className="text-white font-medium">–ú—É–∑—ã–∫–∞–Ω—Ç</div>
                  <div className="text-sm text-gray-400">10+ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–Ω—è—Ç–∏–π</div>
                </div>
                <div className="text-2xl">üéπ</div>
              </div>
            )}

            {/* –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ */}
            {analytics.totalEvents >= 50 && (
              <div className="flex items-center space-x-4 p-4 bg-gray-750 rounded-lg">
                <div className="p-2 bg-yellow-500 rounded-lg">
                  <Calendar className="w-5 h-5 text-white" />
                </div>
                <div className="flex-1">
                  <div className="text-white font-medium">–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫</div>
                  <div className="text-sm text-gray-400">50+ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π</div>
                </div>
                <div className="text-2xl">üìÖ</div>
              </div>
            )}
          </div>
        </div>

        {/* –ü—Ä–æ–≥—Ä–µ—Å—Å –∏ —Ü–µ–ª–∏ */}
        <div className="bg-gray-800 rounded-lg border border-gray-700 p-6">
          <h3 className="text-xl font-semibold text-white mb-6 flex items-center space-x-2">
            <Target className="w-6 h-6" />
            <span>–ü—Ä–æ–≥—Ä–µ—Å—Å –∏ —Ü–µ–ª–∏</span>
          </h3>

          <div className="space-y-6">
            {/* –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å */}
            <div>
              <div className="flex justify-between items-center mb-2">
                <span className="text-white font-medium">–û–±—â–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ</span>
                <span className="text-lg font-bold text-blue-400">
                  {analytics.completionRate}%
                </span>
              </div>
              <div className="w-full bg-gray-700 rounded-full h-3">
                <div
                  className="bg-gradient-to-r from-blue-500 to-green-500 h-3 rounded-full transition-all duration-300"
                  style={{ width: `${analytics.completionRate}%` }}
                ></div>
              </div>
              <div className="text-sm text-gray-400 mt-1">
                {analytics.completedEvents} –∏–∑ {analytics.totalEvents} —Å–æ–±—ã—Ç–∏–π
              </div>
            </div>

            {/* –¶–µ–ª—å –ø—Ä–∞–∫—Ç–∏–∫–∏ */}
            <div>
              <div className="flex justify-between items-center mb-2">
                <span className="text-white font-medium">–ü—Ä–∞–∫—Ç–∏–∫–∞ (—Ü–µ–ª—å: 20—á/–º–µ—Å—è—Ü)</span>
                <span className="text-lg font-bold text-purple-400">
                  {Math.round(periodAnalytics.practiceTime / 60)}—á
                </span>
              </div>
              <div className="w-full bg-gray-700 rounded-full h-3">
                <div
                  className="bg-purple-500 h-3 rounded-full transition-all duration-300"
                  style={{ width: `${Math.min(100, (periodAnalytics.practiceTime / (20 * 60)) * 100)}%` }}
                ></div>
              </div>
              <div className="text-sm text-gray-400 mt-1">
                {periodAnalytics.practiceTime} –∏–∑ 1200 –º–∏–Ω—É—Ç
              </div>
            </div>

            {/* –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å */}
            <div>
              <div className="flex justify-between items-center mb-2">
                <span className="text-white font-medium">–†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å</span>
                <span className="text-lg font-bold text-yellow-400">
                  {Math.round((periodAnalytics.totalEvents / 30) * 100)}%
                </span>
              </div>
              <div className="w-full bg-gray-700 rounded-full h-3">
                <div
                  className="bg-yellow-500 h-3 rounded-full transition-all duration-300"
                  style={{ width: `${Math.min(100, (periodAnalytics.totalEvents / 30) * 100)}%` }}
                ></div>
              </div>
              <div className="text-sm text-gray-400 mt-1">
                –°—Ä–µ–¥–Ω–µ–µ: {Math.round(periodAnalytics.totalEvents / 30)} —Å–æ–±—ã—Ç–∏–π/–¥–µ–Ω—å
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      {loading.isLoading ? (
        <div className="flex justify-center py-12">
          <LoadingSpinner size="lg" text="–ó–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É..." />
        </div>
      ) : (
        <div className="bg-gray-800 rounded-lg border border-gray-700 p-6">
          <h3 className="text-xl font-semibold text-white mb-6 flex items-center space-x-2">
            <BarChart3 className="w-6 h-6" />
            <span>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</span>
          </h3>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {/* –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å */}
            <div className="space-y-3">
              <h4 className="text-lg font-medium text-white">–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</h4>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span className="text-gray-400">–í—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è:</span>
                  <span className="text-green-400">{Math.round(periodAnalytics.completedDuration / 60)}—á</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è:</span>
                  <span className="text-blue-400">{Math.round(periodAnalytics.totalDuration / 60)}—á</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:</span>
                  <span className="text-white font-semibold">
                    {formatPercent(periodAnalytics.completedDuration, periodAnalytics.totalDuration)}
                  </span>
                </div>
              </div>
            </div>

            {/* –í—Ä–µ–º—è –ø—Ä–∞–∫—Ç–∏–∫–∏ */}
            <div className="space-y-3">
              <h4 className="text-lg font-medium text-white">–ü—Ä–∞–∫—Ç–∏–∫–∞</h4>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between">
                  <span className="text-gray-400">–í—Ä–µ–º—è –ø—Ä–∞–∫—Ç–∏–∫–∏:</span>
                  <span className="text-purple-400">{Math.round(periodAnalytics.practiceTime / 60)}—á</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">–°—Ä–µ–¥–Ω—è—è —Å–µ—Å—Å–∏—è:</span>
                  <span className="text-purple-400">
                    {analytics.practiceEvents > 0 
                      ? Math.round(periodAnalytics.practiceTime / analytics.practiceEvents) 
                      : 0} –º–∏–Ω
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">–ü—Ä–æ–≥—Ä–µ—Å—Å –∫ —Ü–µ–ª–∏:</span>
                  <span className="text-white font-semibold">
                    {Math.round((periodAnalytics.practiceTime / (20 * 60)) * 100)}%
                  </span>
                </div>
              </div>
            </div>

            {/* –¢—Ä–µ–Ω–¥—ã */}
            <div className="space-y-3">
              <h4 className="text-lg font-medium text-white">–¢—Ä–µ–Ω–¥—ã</h4>
              <div className="space-y-2 text-sm">
                <div className="flex justify-between items-center">
                  <span className="text-gray-400">–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–Ω–∏:</span>
                  <span className="text-green-400 flex items-center space-x-1">
                    <TrendingUp className="w-4 h-4" />
                    <span>{weekdayStats.filter(s => s.count > 0).length}/7</span>
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">–°–∞–º—ã–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π:</span>
                  <span className="text-yellow-400">
                    {weekdayStats.reduce((max, stat) => 
                      stat.count > max.count ? stat : max, weekdayStats[0]
                    ).day}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-gray-400">–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è/–¥–µ–Ω—å:</span>
                  <span className="text-blue-400">
                    {Math.round(periodAnalytics.totalDuration / 7 / 60)}—á
                  </span>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ */}
      <div className="bg-gray-800 rounded-lg border border-gray-700 p-6">
        <h3 className="text-xl font-semibold text-white mb-4 flex items-center space-x-2">
          <AlertCircle className="w-6 h-6" />
          <span>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</span>
        </h3>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {/* –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö */}
          {analytics.completionRate < 60 && (
            <div className="p-4 bg-yellow-900 border border-yellow-700 rounded-lg">
              <div className="flex items-center space-x-2 mb-2">
                <AlertCircle className="w-5 h-5 text-yellow-400" />
                <span className="font-medium text-yellow-400">–ù–∏–∑–∫–∞—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</span>
              </div>
              <p className="text-sm text-yellow-100">
                –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—å—à–µ —Å–æ–±—ã—Ç–∏–π, –Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∏—Ö –±–æ–ª–µ–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ
              </p>
            </div>
          )}

          {periodAnalytics.practiceTime < 300 && ( // –º–µ–Ω—å—à–µ 5 —á–∞—Å–æ–≤ –ø—Ä–∞–∫—Ç–∏–∫–∏
            <div className="p-4 bg-purple-900 border border-purple-700 rounded-lg">
              <div className="flex items-center space-x-2 mb-2">
                <Activity className="w-5 h-5 text-purple-400" />
                <span className="font-medium text-purple-400">–ú–∞–ª–æ –ø—Ä–∞–∫—Ç–∏–∫–∏</span>
              </div>
              <p className="text-sm text-purple-100">
                –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —É–≤–µ–ª–∏—á–∏—Ç—å –≤—Ä–µ–º—è –ø—Ä–∞–∫—Ç–∏–∫–∏ –¥–æ 1-2 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å
              </p>
            </div>
          )}

          {weekdayStats.filter(s => s.count === 0).length > 3 && (
            <div className="p-4 bg-blue-900 border border-blue-700 rounded-lg">
              <div className="flex items-center space-x-2 mb-2">
                <Calendar className="w-5 h-5 text-blue-400" />
                <span className="font-medium text-blue-400">–ù–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å</span>
              </div>
              <p className="text-sm text-blue-100">
                –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –±–æ–ª–µ–µ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
              </p>
            </div>
          )}

          {periodAnalytics.avgEventDuration > 180 && ( // –±–æ–ª—å—à–µ 3 —á–∞—Å–æ–≤ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
            <div className="p-4 bg-red-900 border border-red-700 rounded-lg">
              <div className="flex items-center space-x-2 mb-2">
                <Clock className="w-5 h-5 text-red-400" />
                <span className="font-medium text-red-400">–î–ª–∏–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è</span>
              </div>
              <p className="text-sm text-red-100">
                –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–∑–±–∏–µ–Ω–∏—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –±–ª–æ–∫–∏
              </p>
            </div>
          )}
        </div>
      </div>

      {/* –≠–∫—Å–ø–æ—Ä—Ç –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
      <div className="bg-gray-800 rounded-lg border border-gray-700 p-6">
        <div className="flex flex-wrap items-center gap-4">
          <Button
            variant="secondary"
            onClick={exportData}
            icon={Download}
            className="flex items-center space-x-2"
          >
            –≠–∫—Å–ø–æ—Ä—Ç –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
          </Button>
          
          <Button
            variant="secondary"
            onClick={() => window.location.reload()}
            icon={RefreshCw}
            className="flex items-center space-x-2"
          >
            –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
          </Button>
          
          <div className="text-sm text-gray-400">
            –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {new Date().toLocaleTimeString('ru-RU', {
              hour: '2-digit',
              minute: '2-digit'
            })}
          </div>
        </div>
      </div>
    </div>
  );
};

export default AnalyticsView;  